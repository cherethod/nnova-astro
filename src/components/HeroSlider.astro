---
// Props del componente
export interface Props {
  slides?: Array<{
    title: string;
    subtitle?: string;
    backgroundImage?: string;
    backgroundColor?: string;
    linkURL?: string;
    linkText?: string;
  }>;
  autoplayInterval?: number; // en milisegundos
}

const { 
  slides = [
    {
      title: "Proyectos integrales. Estilo y sofisticación en cualquier espacio",
      subtitle: "Personaliza el ambiente con diversos diseños y acabados, ofreciendo mayor facilidad de instalación y variedad de opciones.",
      backgroundColor: "bg-gradient-to-br from-blue-600 to-purple-700",
      backgroundImage:"./img/slides/nnova_designs_proyectos_integrales.webp",
      linkURL: "#",
      linkText: "Explorar"

    },
    {
      title: "No solo construimos, creamos experiencias",
      subtitle: "Aisla tu espacio para poder disfrutar de un ambiente más tranquilo y confortable.",
      backgroundColor: "bg-gradient-to-br from-green-600 to-teal-700",
      backgroundImage:"./img/slides/aislamientos_acusticos_termicos.webp",
    },
    {
      title: "Tu Éxito es Nuestro Objetivo",
      subtitle: "Trabajamos juntos para alcanzar tus metas",
      backgroundColor: "bg-gradient-to-br from-orange-600 to-red-700"
    }
  ],
  autoplayInterval = 5000 
} = Astro.props;
---

<section id="hero-slider" class="relative h-dvh xl:h-[calc(100vh-150px)] w-dvw overflow-hidden xl:mt-[150px] transition-all duration-300">
  <!-- Slides Container -->
  <div class="relative h-full w-full">
    {slides.map((slide, index) => (
      <div 
        class={`absolute inset-0 flex items-center justify-center text-white transition-opacity duration-1000 ${
          index === 0 ? 'opacity-100' : 'opacity-0'
        } ${slide.backgroundColor || 'bg-gray-900'} ${slide.backgroundImage ? 'bg-cover bg-left md:bg-center' : ''}`}
        data-slide={index}
        style={slide.backgroundImage ? `background-image: url(${slide.backgroundImage});` : ''}
      >
        {slide.backgroundImage && (
          <div class="absolute inset-0 bg-black/30"></div>
        )}
        
        <div class="relative z-10 text-center px-4 max-w-4xl mx-auto">
          <h1 class="text-4xl md:text-6xl lg:text-7xl font-bold mb-6 animate-fade-in-up text-pretty">
            {slide.title}
          </h1>
          {slide.subtitle && (
            <p class="text-xl md:text-2xl lg:text-3xl opacity-90 animate-fade-in-up-delay">
              {slide.subtitle}
            </p>
            
          )}
          {
              slide.linkURL && slide.linkText && (
                <div class="mt-6">
                  <a href="{slide.linkURL}" class="inline-block px-6 py-3 bg-fuchsia-800 text-white font-semibold rounded-lg shadow-lg hover:bg-fuchsia-950 transition-colors duration-300">
                    {slide.linkText}
                  </a>
                </div>
              )
            }
        </div>
      </div>
    ))}
  </div>

  <!-- Indicators -->
  <div class="absolute bottom-8 left-1/2 transform -translate-x-1/2 flex space-x-3 z-20">
    {slides.map((_, index) => (
      <button
        class={`w-4 h-4 rounded-full border-2 border-white transition-all duration-300 hover:scale-110 ${
          index === 0 ? 'bg-white' : 'bg-transparent'
        }`}
        data-indicator={index}
        aria-label={`Ir al slide ${index + 1}`}
      ></button>
    ))}
  </div>
</section>

<style>
  @keyframes fade-in-up {
    from {
      opacity: 0;
      transform: translateY(30px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .animate-fade-in-up {
    animation: fade-in-up 0.8s ease-out;
  }

  .animate-fade-in-up-delay {
    animation: fade-in-up 0.8s ease-out 0.2s both;
  }
</style>

<script define:vars={{ autoplayInterval, slidesCount: slides.length }}>
  class HeroSlider {
    constructor() {
      this.currentSlide = 0;
      this.totalSlides = slidesCount;
      this.autoplayInterval = autoplayInterval;
      this.intervalId = null;
      this.isPaused = false;
      
      this.slides = document.querySelectorAll('[data-slide]');
      this.indicators = document.querySelectorAll('[data-indicator]');
      
      this.init();
    }

    init() {
      // Event listeners para los indicadores
      this.indicators.forEach((indicator, index) => {
        indicator.addEventListener('click', () => this.goToSlide(index));
        indicator.addEventListener('mouseenter', () => this.pauseAutoplay());
        indicator.addEventListener('mouseleave', () => this.resumeAutoplay());
      });

      // Iniciar autoplay
      this.startAutoplay();
    }

    goToSlide(slideIndex) {
      // Ocultar slide actual
      this.slides[this.currentSlide].classList.remove('opacity-100');
      this.slides[this.currentSlide].classList.add('opacity-0');
      
      // Desactivar indicador actual
      this.indicators[this.currentSlide].classList.remove('bg-white');
      this.indicators[this.currentSlide].classList.add('bg-transparent');

      // Actualizar índice
      this.currentSlide = slideIndex;

      // Mostrar nuevo slide
      this.slides[this.currentSlide].classList.remove('opacity-0');
      this.slides[this.currentSlide].classList.add('opacity-100');
      
      // Activar nuevo indicador
      this.indicators[this.currentSlide].classList.remove('bg-transparent');
      this.indicators[this.currentSlide].classList.add('bg-white');
    }

    nextSlide() {
      const nextIndex = (this.currentSlide + 1) % this.totalSlides;
      this.goToSlide(nextIndex);
    }

    startAutoplay() {
      if (this.intervalId) {
        clearInterval(this.intervalId);
      }
      
      this.intervalId = setInterval(() => {
        if (!this.isPaused) {
          this.nextSlide();
        }
      }, this.autoplayInterval);
    }

    pauseAutoplay() {
      this.isPaused = true;
    }

    resumeAutoplay() {
      this.isPaused = false;
    }

    destroy() {
      if (this.intervalId) {
        clearInterval(this.intervalId);
      }
    }
  }

  // Inicializar el slider cuando el DOM esté listo
  document.addEventListener('DOMContentLoaded', () => {
    new HeroSlider();
  });

  // Limpiar el interval al cambiar de página
  document.addEventListener('astro:before-preparation', () => {
    const sliderInstance = window.heroSliderInstance;
    if (sliderInstance && sliderInstance.destroy) {
      sliderInstance.destroy();
    }
  });
</script>
